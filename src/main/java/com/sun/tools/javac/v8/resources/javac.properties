#
# @(#)javac.properties	1.8 99/12/08
#
# Copyright 1999 by Sun Microsystems, Inc.,
# 901 San Antonio Road, Palo Alto, California, 94303, U.S.A.
# All rights reserved.
#
# This software is the confidential and proprietary information
# of Sun Microsystems, Inc. ("Confidential Information").  You
# shall not disclose such Confidential Information and shall use
# it only in accordance with the terms of the license agreement
# you entered into with Sun.
#

## standard options

javac.opt.g=\
    Generate all debugging info
javac.opt.g.none=\
    Generate no debugging info
javac.opt.g.lines.vars.source=\
    Generate only some debugging info
javac.opt.O=\
    Optimize; may hinder debugging or enlarge class file
javac.opt.nowarn=\
    Generate no warnings
javac.opt.verbose=\
    Output messages about what the compiler is doing
javac.opt.deprecation=\
    Output source locations where deprecated APIs are used
javac.opt.classpath=\
    Specify where to find user class files
javac.opt.sourcepath=\
    Specify where to find input source files
javac.opt.bootclasspath=\
    Override location of bootstrap class files
javac.opt.extdirs=\
    Override location of installed extensions
javac.opt.d=\
    Specify where to place generated class files
javac.opt.encoding=\
    Specify character encoding used by source files
javac.opt.target=\
    Generate class files for specific VM version
javac.opt.arg.path=\
    <path>
javac.opt.arg.dirs=\
    <dirs>
javac.opt.arg.directory=\
    <directory>
javac.opt.arg.encoding=\
    <encoding>
javac.opt.arg.release=\
    <release>

## extended options

javac.opt.gj=\
    Accept GJ input
javac.opt.moreinfo=\
    Print extended information for type variables
javac.opt.printflat=\
    Print abstract syntax tree after inner class conversion
javac.opt.printsearch=\
    Print information where classfiles are searched
javac.opt.prompt=\
    Stop after each error
javac.opt.retrofit=\
    Retrofit existing classfiles with generic types
javac.opt.s=\
    Emit java sources instead of classfiles
javac.opt.scramble=\
    Scramble private identifiers in bytecode
javac.opt.scrambleall=\
    Scramble package visible identifiers in bytecode
javac.opt.switchcheck=\
    Warn about fall-through in switches
javac.opt.warnunchecked=\
    Output source locations where unchecked operations are used
javac.opt.version=\
    Version information
javac.opt.arg.pathname=\
    <pathname>

## errors

javac.err.invalid.arg=\
    invalid argument: {0}
javac.err.invalid.flag=\
    invalid flag: {0}
javac.err.req.arg=\
    {0} requires argument
javac.err.invalid.target=\
    invalid target release: {0}

## messages

javac.msg.usage.header=\
Usage: {0} <options> <source files>\n\
where possible options include:
	
javac.msg.bug=\
An exception has occurred in the compiler ({0}). \
Please file a bug at the Java Developer Connection (http://java.sun.com/cgi-bin/bugreport.cgi).  \
Include your program and the following diagnostic in your report.  Thank you.

javac.msg.io=\
\n\nAn input/output error occurred.\n\
Consult the following stack trace for details.\n

javac.msg.resource=\
\n\nThe system is out of resources.\n\
Consult the following stack trace for details.\n

## printStats()

javac.stats.tree=\
    {0} trees
javac.stats.symbol=\
    {0} symbols
javac.stats.type=\
    {0} types
javac.stats.scope=\
    {0} scopes
javac.stats.scope.entry=\
    {0} scope entries
javac.item=\
    {0} items
