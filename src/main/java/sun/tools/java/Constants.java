package sun.tools.java;

public interface Constants extends RuntimeConstants {

	boolean tracing = true;
	Identifier idAppend = Identifier.lookup("append");
	Identifier idClassInit = Identifier.lookup("<clinit>");
	Identifier idCode = Identifier.lookup("Code");
	Identifier idInit = Identifier.lookup("<init>");
	Identifier idLength = Identifier.lookup("length");
	Identifier idNull = Identifier.lookup("");
	Identifier idStar = Identifier.lookup("*");
	Identifier idSuper = Identifier.lookup("super");
	Identifier idThis = Identifier.lookup("this");
	Identifier idClass = Identifier.lookup("class");
	Identifier idToString = Identifier.lookup("toString");
	Identifier idValueOf = Identifier.lookup("valueOf");
	Identifier idNew = Identifier.lookup("new");
	Identifier idGetClass = Identifier.lookup("getClass");
	Identifier idTYPE = Identifier.lookup("TYPE");
	Identifier idFinallyReturnValue = Identifier.lookup("<return>");
	Identifier idJavaLang = Identifier.lookup("java.lang");
	Identifier idJavaLangCloneable = Identifier.lookup("java.lang.Cloneable");
	Identifier idJavaLangError = Identifier.lookup("java.lang.Error");
	Identifier idJavaLangException = Identifier.lookup("java.lang.Exception");
	Identifier idJavaLangObject = Identifier.lookup("java.lang.Object");
	Identifier idJavaLangClass = Identifier.lookup("java.lang.Class");
	Identifier idJavaLangRuntimeException = Identifier.lookup("java.lang.RuntimeException");
	Identifier idJavaLangString = Identifier.lookup("java.lang.String");
	Identifier idJavaLangStringBuffer = Identifier.lookup("java.lang.StringBuffer");
	Identifier idJavaLangThrowable = Identifier.lookup("java.lang.Throwable");
	Identifier idJavaIoSerializable = Identifier.lookup("java.io.Serializable");
	Identifier idConstantValue = Identifier.lookup("ConstantValue");
	Identifier idLocalVariableTable = Identifier.lookup("LocalVariableTable");
	Identifier idLineNumberTable = Identifier.lookup("LineNumberTable");
	Identifier idCoverageTable = Identifier.lookup("CoverageTable");
	Identifier idSourceFile = Identifier.lookup("SourceFile");
	Identifier idDocumentation = Identifier.lookup("Documentation");
	Identifier idDeprecated = Identifier.lookup("Deprecated");
	Identifier idSynthetic = Identifier.lookup("Synthetic");
	Identifier idExceptions = Identifier.lookup("Exceptions");
	Identifier idInnerClasses = Identifier.lookup("InnerClasses");
	Identifier idClone = Identifier.lookup("clone");
	char SIGC_INNERCLASS = 36;
	String SIG_INNERCLASS = "$";
	String prefixThis = "this$";
	String prefixVal = "val$";
	String prefixLoc = "loc$";
	String prefixAccess = "access$";
	String prefixClass = "class$";
	String prefixArray = "array$";
	int F_VERBOSE = 1;
	int F_DUMP = 2;
	int F_WARNINGS = 4;
	int F_DEBUG_LINES = 4096;
	int F_DEBUG_VARS = 8192;
	int F_DEBUG_SOURCE = 0x40000;
	int F_OPT = 16384;
	int F_OPT_INTERCLASS = 32768;
	int F_DEPENDENCIES = 32;
	int F_COVERAGE = 64;
	int F_COVDATA = 128;
	int F_DEPRECATION = 512;
	int F_PRINT_DEPENDENCIES = 1024;
	int F_VERSION12 = 2048;
	int F_ERRORSREPORTED = 0x10000;
	int F_STRICTDEFAULT = 0x20000;
	int M_PUBLIC = 1;
	int M_PRIVATE = 2;
	int M_PROTECTED = 4;
	int M_STATIC = 8;
	int M_TRANSIENT = 128;
	int M_SYNCHRONIZED = 32;
	int M_ABSTRACT = 1024;
	int M_NATIVE = 256;
	int M_FINAL = 16;
	int M_VOLATILE = 64;
	int M_INTERFACE = 512;
	int M_ANONYMOUS = 0x10000;
	int M_LOCAL = 0x20000;
	int M_DEPRECATED = 0x40000;
	int M_SYNTHETIC = 0x80000;
	int M_INLINEABLE = 0x100000;
	int M_STRICTFP = 0x200000;
	String paraDeprecated = "@deprecated";
	int MM_CLASS = 0x200611;
	int MM_MEMBER = 31;
	int MM_FIELD = 223;
	int MM_METHOD = 0x20053f;
	int ACCM_CLASS = 3633;
	int ACCM_MEMBER = 31;
	int ACCM_INNERCLASS = 3615;
	int ACCM_FIELD = 223;
	int ACCM_METHOD = 3391;
	int TC_BOOLEAN = 0;
	int TC_BYTE = 1;
	int TC_CHAR = 2;
	int TC_SHORT = 3;
	int TC_INT = 4;
	int TC_LONG = 5;
	int TC_FLOAT = 6;
	int TC_DOUBLE = 7;
	int TC_NULL = 8;
	int TC_ARRAY = 9;
	int TC_CLASS = 10;
	int TC_VOID = 11;
	int TC_METHOD = 12;
	int TC_ERROR = 13;
	int CT_FIRST_KIND = 1;
	int CT_METHOD = 1;
	int CT_FIKT_METHOD = 2;
	int CT_BLOCK = 3;
	int CT_FIKT_RET = 4;
	int CT_CASE = 5;
	int CT_SWITH_WO_DEF = 6;
	int CT_BRANCH_TRUE = 7;
	int CT_BRANCH_FALSE = 8;
	int CT_LAST_KIND = 8;
	int TM_NULL = 256;
	int TM_VOID = 2048;
	int TM_BOOLEAN = 1;
	int TM_BYTE = 2;
	int TM_CHAR = 4;
	int TM_SHORT = 8;
	int TM_INT = 16;
	int TM_LONG = 32;
	int TM_FLOAT = 64;
	int TM_DOUBLE = 128;
	int TM_ARRAY = 512;
	int TM_CLASS = 1024;
	int TM_METHOD = 4096;
	int TM_ERROR = 8192;
	int TM_INT32 = 30;
	int TM_NUM32 = 94;
	int TM_NUM64 = 160;
	int TM_INTEGER = 62;
	int TM_REAL = 192;
	int TM_NUMBER = 254;
	int TM_REFERENCE = 1792;
	int CS_UNDEFINED = 0;
	int CS_UNDECIDED = 1;
	int CS_BINARY = 2;
	int CS_SOURCE = 3;
	int CS_PARSED = 4;
	int CS_CHECKED = 5;
	int CS_COMPILED = 6;
	int CS_NOTFOUND = 7;
	int ATT_ALL = -1;
	int ATT_CODE = 2;
	int ATT_ALLCLASSES = 4;
	int WHEREOFFSETBITS = 32;
	long MAXFILESIZE = 0xffffffffL;
	long MAXLINENUMBER = 0xffffffffL;
	int COMMA = 0;
	int ASSIGN = 1;
	int ASGMUL = 2;
	int ASGDIV = 3;
	int ASGREM = 4;
	int ASGADD = 5;
	int ASGSUB = 6;
	int ASGLSHIFT = 7;
	int ASGRSHIFT = 8;
	int ASGURSHIFT = 9;
	int ASGBITAND = 10;
	int ASGBITOR = 11;
	int ASGBITXOR = 12;
	int COND = 13;
	int OR = 14;
	int AND = 15;
	int BITOR = 16;
	int BITXOR = 17;
	int BITAND = 18;
	int NE = 19;
	int EQ = 20;
	int GE = 21;
	int GT = 22;
	int LE = 23;
	int LT = 24;
	int INSTANCEOF = 25;
	int LSHIFT = 26;
	int RSHIFT = 27;
	int URSHIFT = 28;
	int ADD = 29;
	int SUB = 30;
	int DIV = 31;
	int REM = 32;
	int MUL = 33;
	int CAST = 34;
	int POS = 35;
	int NEG = 36;
	int NOT = 37;
	int BITNOT = 38;
	int PREINC = 39;
	int PREDEC = 40;
	int NEWARRAY = 41;
	int NEWINSTANCE = 42;
	int NEWFROMNAME = 43;
	int POSTINC = 44;
	int POSTDEC = 45;
	int FIELD = 46;
	int METHOD = 47;
	int ARRAYACCESS = 48;
	int NEW = 49;
	int INC = 50;
	int DEC = 51;
	int CONVERT = 55;
	int EXPR = 56;
	int ARRAY = 57;
	int GOTO = 58;
	int IDENT = 60;
	int BOOLEANVAL = 61;
	int BYTEVAL = 62;
	int CHARVAL = 63;
	int SHORTVAL = 64;
	int INTVAL = 65;
	int LONGVAL = 66;
	int FLOATVAL = 67;
	int DOUBLEVAL = 68;
	int STRINGVAL = 69;
	int BYTE = 70;
	int CHAR = 71;
	int SHORT = 72;
	int INT = 73;
	int LONG = 74;
	int FLOAT = 75;
	int DOUBLE = 76;
	int VOID = 77;
	int BOOLEAN = 78;
	int TRUE = 80;
	int FALSE = 81;
	int THIS = 82;
	int SUPER = 83;
	int NULL = 84;
	int IF = 90;
	int ELSE = 91;
	int FOR = 92;
	int WHILE = 93;
	int DO = 94;
	int SWITCH = 95;
	int CASE = 96;
	int DEFAULT = 97;
	int BREAK = 98;
	int CONTINUE = 99;
	int RETURN = 100;
	int TRY = 101;
	int CATCH = 102;
	int FINALLY = 103;
	int THROW = 104;
	int STAT = 105;
	int EXPRESSION = 106;
	int DECLARATION = 107;
	int VARDECLARATION = 108;
	int IMPORT = 110;
	int CLASS = 111;
	int EXTENDS = 112;
	int IMPLEMENTS = 113;
	int INTERFACE = 114;
	int PACKAGE = 115;
	int PRIVATE = 120;
	int PUBLIC = 121;
	int PROTECTED = 122;
	int CONST = 123;
	int STATIC = 124;
	int TRANSIENT = 125;
	int SYNCHRONIZED = 126;
	int NATIVE = 127;
	int FINAL = 128;
	int VOLATILE = 129;
	int ABSTRACT = 130;
	int STRICTFP = 131;
	int SEMICOLON = 135;
	int COLON = 136;
	int QUESTIONMARK = 137;
	int LBRACE = 138;
	int RBRACE = 139;
	int LPAREN = 140;
	int RPAREN = 141;
	int LSQBRACKET = 142;
	int RSQBRACKET = 143;
	int THROWS = 144;
	int ERROR = 145;
	int COMMENT = 146;
	int TYPE = 147;
	int LENGTH = 148;
	int INLINERETURN = 149;
	int INLINEMETHOD = 150;
	int INLINENEWINSTANCE = 151;
	int opPrecedence[] = { 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 13, 14, 15, 16, 17, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 23, 24, 24, 24, 24, 24, 24, 25, 25, 26, 26, 26, 26, 26, 26 };
	String opNames[] = { ",", "=", "*=", "/=", "%=", "+=", "-=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", "?:", "||", "&&", "|", "^", "&", "!=", "==", ">=", ">", "<=", "<", "instanceof", "<<", ">>", ">>>", "+", "-", "/", "%", "*", "cast", "+", "-", "!", "~", "++", "--", "new", "new", "new", "++", "--", "field", "method", "[]", "new", "++", "--", null, null, null, "convert", "expr", "array", "goto", null, "Identifier", "boolean", "byte", "char", "short", "int", "long", "float", "double", "string", "byte", "char", "short", "int", "long", "float", "double", "void", "boolean", null, "true", "false", "this", "super", "null", null, null, null, null, null, "if", "else", "for", "while", "do", "switch", "case", "default", "break", "continue", "return", "try", "catch", "finally", "throw", "stat",
			"expression", "declaration", "declaration", null, "import", "class", "extends", "implements", "interface", "package", null, null, null, null, "private", "public", "protected", "const", "static", "transient", "synchronized", "native", "final", "volatile", "abstract", "strictfp", null, null, null, ";", ":", "?", "{", "}", "(", ")", "[", "]", "throws", "error", "comment", "type", "length", "inline-return", "inline-method", "inline-new" };

}
